# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import lms_pb2 as lms__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in lms_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LMSServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.login = channel.unary_unary(
                '/LMSService/login',
                request_serializer=lms__pb2.LoginRequest.SerializeToString,
                response_deserializer=lms__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.logout = channel.unary_unary(
                '/LMSService/logout',
                request_serializer=lms__pb2.LogoutRequest.SerializeToString,
                response_deserializer=lms__pb2.LogoutResponse.FromString,
                _registered_method=True)
        self.UploadFile = channel.stream_unary(
                '/LMSService/UploadFile',
                request_serializer=lms__pb2.FileChunk.SerializeToString,
                response_deserializer=lms__pb2.UploadStatus.FromString,
                _registered_method=True)
        self.ReplicateFile = channel.stream_unary(
                '/LMSService/ReplicateFile',
                request_serializer=lms__pb2.FileChunk.SerializeToString,
                response_deserializer=lms__pb2.UploadStatus.FromString,
                _registered_method=True)
        self.DownloadFile = channel.unary_stream(
                '/LMSService/DownloadFile',
                request_serializer=lms__pb2.FileRequest.SerializeToString,
                response_deserializer=lms__pb2.FileChunk.FromString,
                _registered_method=True)
        self.listReq = channel.unary_unary(
                '/LMSService/listReq',
                request_serializer=lms__pb2.listRequest.SerializeToString,
                response_deserializer=lms__pb2.listResponse.FromString,
                _registered_method=True)
        self.grade = channel.unary_unary(
                '/LMSService/grade',
                request_serializer=lms__pb2.gradeReq.SerializeToString,
                response_deserializer=lms__pb2.gradeRes.FromString,
                _registered_method=True)
        self.llmq = channel.unary_unary(
                '/LMSService/llmq',
                request_serializer=lms__pb2.llmreq.SerializeToString,
                response_deserializer=lms__pb2.llmres.FromString,
                _registered_method=True)
        self.RequestVote = channel.unary_unary(
                '/LMSService/RequestVote',
                request_serializer=lms__pb2.RequestVoteRequest.SerializeToString,
                response_deserializer=lms__pb2.RequestVoteResponse.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/LMSService/AppendEntries',
                request_serializer=lms__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=lms__pb2.AppendEntriesResponse.FromString,
                _registered_method=True)
        self.GetLeader = channel.unary_unary(
                '/LMSService/GetLeader',
                request_serializer=lms__pb2.Empty.SerializeToString,
                response_deserializer=lms__pb2.GetLeaderResponse.FromString,
                _registered_method=True)
        self.Suspend = channel.unary_unary(
                '/LMSService/Suspend',
                request_serializer=lms__pb2.SuspendRequest.SerializeToString,
                response_deserializer=lms__pb2.Empty.FromString,
                _registered_method=True)


class LMSServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listReq(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def grade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def llmq(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Suspend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LMSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=lms__pb2.LoginRequest.FromString,
                    response_serializer=lms__pb2.LoginResponse.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=lms__pb2.LogoutRequest.FromString,
                    response_serializer=lms__pb2.LogoutResponse.SerializeToString,
            ),
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=lms__pb2.FileChunk.FromString,
                    response_serializer=lms__pb2.UploadStatus.SerializeToString,
            ),
            'ReplicateFile': grpc.stream_unary_rpc_method_handler(
                    servicer.ReplicateFile,
                    request_deserializer=lms__pb2.FileChunk.FromString,
                    response_serializer=lms__pb2.UploadStatus.SerializeToString,
            ),
            'DownloadFile': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=lms__pb2.FileRequest.FromString,
                    response_serializer=lms__pb2.FileChunk.SerializeToString,
            ),
            'listReq': grpc.unary_unary_rpc_method_handler(
                    servicer.listReq,
                    request_deserializer=lms__pb2.listRequest.FromString,
                    response_serializer=lms__pb2.listResponse.SerializeToString,
            ),
            'grade': grpc.unary_unary_rpc_method_handler(
                    servicer.grade,
                    request_deserializer=lms__pb2.gradeReq.FromString,
                    response_serializer=lms__pb2.gradeRes.SerializeToString,
            ),
            'llmq': grpc.unary_unary_rpc_method_handler(
                    servicer.llmq,
                    request_deserializer=lms__pb2.llmreq.FromString,
                    response_serializer=lms__pb2.llmres.SerializeToString,
            ),
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=lms__pb2.RequestVoteRequest.FromString,
                    response_serializer=lms__pb2.RequestVoteResponse.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=lms__pb2.AppendEntriesRequest.FromString,
                    response_serializer=lms__pb2.AppendEntriesResponse.SerializeToString,
            ),
            'GetLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLeader,
                    request_deserializer=lms__pb2.Empty.FromString,
                    response_serializer=lms__pb2.GetLeaderResponse.SerializeToString,
            ),
            'Suspend': grpc.unary_unary_rpc_method_handler(
                    servicer.Suspend,
                    request_deserializer=lms__pb2.SuspendRequest.FromString,
                    response_serializer=lms__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LMSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('LMSService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LMSService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LMSService/login',
            lms__pb2.LoginRequest.SerializeToString,
            lms__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LMSService/logout',
            lms__pb2.LogoutRequest.SerializeToString,
            lms__pb2.LogoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/LMSService/UploadFile',
            lms__pb2.FileChunk.SerializeToString,
            lms__pb2.UploadStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/LMSService/ReplicateFile',
            lms__pb2.FileChunk.SerializeToString,
            lms__pb2.UploadStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/LMSService/DownloadFile',
            lms__pb2.FileRequest.SerializeToString,
            lms__pb2.FileChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listReq(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LMSService/listReq',
            lms__pb2.listRequest.SerializeToString,
            lms__pb2.listResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def grade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LMSService/grade',
            lms__pb2.gradeReq.SerializeToString,
            lms__pb2.gradeRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def llmq(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LMSService/llmq',
            lms__pb2.llmreq.SerializeToString,
            lms__pb2.llmres.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LMSService/RequestVote',
            lms__pb2.RequestVoteRequest.SerializeToString,
            lms__pb2.RequestVoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LMSService/AppendEntries',
            lms__pb2.AppendEntriesRequest.SerializeToString,
            lms__pb2.AppendEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LMSService/GetLeader',
            lms__pb2.Empty.SerializeToString,
            lms__pb2.GetLeaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Suspend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LMSService/Suspend',
            lms__pb2.SuspendRequest.SerializeToString,
            lms__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
